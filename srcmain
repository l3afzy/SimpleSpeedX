-- Load Fluent UI and its addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the main UI window
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create two tabs: Main for our hacks and Settings for configs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

------------------------------
-- Movement Hacks Variables --
------------------------------
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:FindFirstChildOfClass("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local normalSpeed = 16          -- Default walk speed
local sprintSpeed = 30          -- Speed when sprinting (LeftShift)
-- speedHack speed will be defined by a slider (default 50)
local stepDistance = 12         -- TP Walk: distance to teleport per step
local rangeThreshold = 10       -- TP Walk: threshold to stop teleport loop
local debounceTime = 0.1        -- TP Walk: delay between teleport loops
local busy = false              -- TP Walk: prevents overlapping teleports

-- Feature toggles (states)
local speedHackEnabled = false
local sprintEnabled = false
local tpWalkEnabled = false

-- Connection holders for sprint and TP Walk
local sprintInputBeganConnection = nil
local sprintInputEndedConnection = nil
local tpWalkConnection = nil

---------------------------------
-- Helper Functions for TP Walk --
---------------------------------
local function isInRange(pos1, pos2, axis)
    local diff = math.abs(pos1[axis] - pos2[axis])
    return diff < rangeThreshold
end

local function handleTeleport(direction)
    if busy then return end
    busy = true
    local startCFrame = HumanoidRootPart.CFrame
    local newPosition = startCFrame.Position + direction
    while true do
        HumanoidRootPart.CFrame = CFrame.new(newPosition)
        local currentPosition = HumanoidRootPart.Position
        if isInRange(currentPosition, newPosition, "X") and isInRange(currentPosition, newPosition, "Z") then
            break
        end
        task.wait(debounceTime)
    end
    busy = false
end

------------------------------------------
-- UI Elements for Movement Hack Controls
------------------------------------------
-- Speed Hack Toggle (Overwrite WalkSpeed)
local SpeedHackToggle = Tabs.Main:AddToggle("SpeedHackToggle", {
    Title = "Speed Hack",
    Default = false,
    Description = "Override WalkSpeed with a custom value."
})
-- Speed Hack Speed Slider
local SpeedHackSlider = Tabs.Main:AddSlider("SpeedHackSlider", {
    Title = "Speed Hack Value",
    Description = "Set custom WalkSpeed.",
    Default = 50,
    Min = 16,
    Max = 100,
    Rounding = 0
})
-- Sprint Toggle (LeftShift to sprint)
local SprintToggle = Tabs.Main:AddToggle("SprintToggle", {
    Title = "Sprint",
    Default = false,
    Description = "Enable sprinting using LeftShift."
})
-- TP Walk Toggle (WASD teleport movement)
local TPWalkToggle = Tabs.Main:AddToggle("TPWalkToggle", {
    Title = "TP Walk",
    Default = false,
    Description = "Enable teleport movement using WASD."
})

--------------------------------------
-- Callbacks for Movement Controls --
--------------------------------------
-- Speed Hack: when toggled, set WalkSpeed to slider value or revert to normalSpeed
SpeedHackToggle:OnChanged(function()
    speedHackEnabled = Options.SpeedHackToggle.Value
    if speedHackEnabled then
        local newSpeed = SpeedHackSlider.Value
        Humanoid.WalkSpeed = newSpeed
        Fluent:Notify({Title = "Speed Hack", Content = "Enabled (Speed: " .. newSpeed .. ")"})
    else
        -- Only revert if sprint is not active; otherwise sprint will handle WalkSpeed
        if not sprintEnabled then
            Humanoid.WalkSpeed = normalSpeed
        end
        Fluent:Notify({Title = "Speed Hack", Content = "Disabled"})
    end
end)
-- When the slider is changed, update WalkSpeed if Speed Hack is enabled
SpeedHackSlider:OnChanged(function(Value)
    if Options.SpeedHackToggle.Value then
        Humanoid.WalkSpeed = Value
        Fluent:Notify({Title = "Speed Hack", Content = "Speed set to: " .. Value})
    end
end)

-- Sprint: toggle connections for LeftShift sprinting
SprintToggle:OnChanged(function()
    sprintEnabled = Options.SprintToggle.Value
    if sprintEnabled then
        if not sprintInputBeganConnection then
            sprintInputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.LeftShift and not Options.SpeedHackToggle.Value then
                    Humanoid.WalkSpeed = sprintSpeed
                end
            end)
        end
        if not sprintInputEndedConnection then
            sprintInputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.LeftShift and not Options.SpeedHackToggle.Value then
                    Humanoid.WalkSpeed = normalSpeed
                end
            end)
        end
        Fluent:Notify({Title = "Sprint", Content = "Enabled"})
    else
        if sprintInputBeganConnection then
            sprintInputBeganConnection:Disconnect()
            sprintInputBeganConnection = nil
        end
        if sprintInputEndedConnection then
            sprintInputEndedConnection:Disconnect()
            sprintInputEndedConnection = nil
        end
        -- Reset WalkSpeed only if Speed Hack is off
        if not Options.SpeedHackToggle.Value then
            Humanoid.WalkSpeed = normalSpeed
        end
        Fluent:Notify({Title = "Sprint", Content = "Disabled"})
    end
end)

-- TP Walk: toggle WASD teleport controls
TPWalkToggle:OnChanged(function()
    tpWalkEnabled = Options.TPWalkToggle.Value
    if tpWalkEnabled then
        if not tpWalkConnection then
            tpWalkConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if not tpWalkEnabled then return end  -- extra check
                if input.KeyCode == Enum.KeyCode.W then
                    handleTeleport(Vector3.new(0, 0, -stepDistance))
                elseif input.KeyCode == Enum.KeyCode.S then
                    handleTeleport(Vector3.new(0, 0, stepDistance))
                elseif input.KeyCode == Enum.KeyCode.A then
                    handleTeleport(Vector3.new(-stepDistance, 0, 0))
                elseif input.KeyCode == Enum.KeyCode.D then
                    handleTeleport(Vector3.new(stepDistance, 0, 0))
                end
            end)
        end
        Fluent:Notify({Title = "TP Walk", Content = "Enabled (Use WASD to teleport)"})
    else
        if tpWalkConnection then
            tpWalkConnection:Disconnect()
            tpWalkConnection = nil
        end
        Fluent:Notify({Title = "TP Walk", Content = "Disabled"})
    end
end)

----------------------------
-- Additional Fluent Demo --
----------------------------
-- (Optional) Some demo UI elements provided by Fluent below
Tabs.Main:AddParagraph({
    Title = "Movement Hacks",
    Content = "Toggle Speed Hack, Sprint, or TP Walk as needed."
})
Tabs.Main:AddButton({
    Title = "Test Dialog",
    Description = "Press to see a test dialog.",
    Callback = function()
        Window:Dialog({
            Title = "Test Dialog",
            Content = "This is a dialog test.",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        print("Dialog confirmed.")
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        print("Dialog cancelled.")
                    end
                }
            }
        })
    end
})

----------------------------
-- Setup Save & Interface --
----------------------------
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
Fluent:Notify({
    Title = "Fluent",
    Content = "The movement hack script has been loaded.",
    Duration = 8
})
SaveManager:LoadAutoloadConfig()
