local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    General = Window:AddTab({ Title = "General", Icon = "home" }),
    Advanced = Window:AddTab({ Title = "Advanced", Icon = "rocket" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Configuration = Window:AddTab({ Title = "Configuration", Icon = "file" })
}
local Options = Fluent.Options

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:FindFirstChildOfClass("Humanoid")
local Root = Character:WaitForChild("HumanoidRootPart")

local normalSpeed = 16
local defaultSpeedHack = 50
local defaultSprintSpeed = 30
local defaultTPWalkDistance = 12
local defaultCFMovementSpeed = 16

local speedHackEnabled = false
local sprintEnabled = false
local tpWalkEnabled = false

local sprintInputBeganConnection, sprintInputEndedConnection, tpWalkConnection

---------------------------
-- GENERAL TAB
---------------------------
local SpeedHackToggle = Tabs.General:AddToggle("SpeedHackToggle", {
    Title = "Speed Hack",
    Default = false,
    Description = "Override WalkSpeed with a custom value."
})
local SpeedHackSlider = Tabs.General:AddSlider("SpeedHackSlider", {
    Title = "Speed Hack Value",
    Description = "Set custom WalkSpeed.",
    Default = defaultSpeedHack,
    Min = 16,
    Max = 100,
    Rounding = 0
})
SpeedHackToggle:OnChanged(function()
    speedHackEnabled = Options.SpeedHackToggle.Value
    if speedHackEnabled then
        Humanoid.WalkSpeed = SpeedHackSlider.Value
        Fluent:Notify({Title = "Speed Hack", Content = "Enabled (Speed: " .. SpeedHackSlider.Value .. ")", Duration = 5})
    else
        if not sprintEnabled then Humanoid.WalkSpeed = normalSpeed end
        Fluent:Notify({Title = "Speed Hack", Content = "Disabled", Duration = 5})
    end
end)
SpeedHackSlider:OnChanged(function(Value)
    if Options.SpeedHackToggle.Value then
        Humanoid.WalkSpeed = Value
        Fluent:Notify({Title = "Speed Hack", Content = "Speed set to: " .. Value, Duration = 5})
    end
end)

local SprintToggle = Tabs.General:AddToggle("SprintToggle", {
    Title = "Sprint",
    Default = false,
    Description = "Enable sprinting using LeftShift."
})
local SprintSpeedSlider = Tabs.General:AddSlider("SprintSpeedSlider", {
    Title = "Sprint Speed",
    Description = "Set sprint speed (when LeftShift is held).",
    Default = defaultSprintSpeed,
    Min = 16,
    Max = 100,
    Rounding = 0
})
SprintToggle:OnChanged(function()
    sprintEnabled = Options.SprintToggle.Value
    if sprintEnabled then -- hello skids
        if not sprintInputBeganConnection then
            sprintInputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.LeftShift and not Options.SpeedHackToggle.Value then
                    Humanoid.WalkSpeed = SprintSpeedSlider.Value
                end
            end)
        end
        if not sprintInputEndedConnection then
            sprintInputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.LeftShift and not Options.SpeedHackToggle.Value then
                    Humanoid.WalkSpeed = normalSpeed
                end
            end)
        end
        Fluent:Notify({Title = "Sprint", Content = "Enabled", Duration = 5})
    else
        if sprintInputBeganConnection then sprintInputBeganConnection:Disconnect() end
        if sprintInputEndedConnection then sprintInputEndedConnection:Disconnect() end
        if not Options.SpeedHackToggle.Value then Humanoid.WalkSpeed = normalSpeed end
        Fluent:Notify({Title = "Sprint", Content = "Disabled", Duration = 5})
    end
end)

local TPWalkToggle = Tabs.General:AddToggle("TPWalkToggle", {
    Title = "TP Walk",
    Default = false,
    Description = "Enable teleport movement using WASD keys."
})
local TPWalkDistanceSlider = Tabs.General:AddSlider("TPWalkDistanceSlider", {
    Title = "TP Walk Distance",
    Description = "Set teleport distance in studs.",
    Default = defaultTPWalkDistance,
    Min = 5,
    Max = 50,
    Rounding = 0
})
TPWalkToggle:OnChanged(function()
    tpWalkEnabled = Options.TPWalkToggle.Value
    if tpWalkEnabled then
        if not tpWalkConnection then
            tpWalkConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed) -- hello skids
                if gameProcessed then return end
                if not tpWalkEnabled then return end
                local stepDistance = TPWalkDistanceSlider.Value
                if input.KeyCode == Enum.KeyCode.W then
                    Root.CFrame = CFrame.new(Root.Position + Vector3.new(0, 0, -stepDistance))
                elseif input.KeyCode == Enum.KeyCode.S then
                    Root.CFrame = CFrame.new(Root.Position + Vector3.new(0, 0, stepDistance))
                elseif input.KeyCode == Enum.KeyCode.A then
                    Root.CFrame = CFrame.new(Root.Position + Vector3.new(-stepDistance, 0, 0))
                elseif input.KeyCode == Enum.KeyCode.D then
                    Root.CFrame = CFrame.new(Root.Position + Vector3.new(stepDistance, 0, 0))
                end
            end)
        end
        Fluent:Notify({Title = "TP Walk", Content = "Enabled (Use WASD to teleport)", Duration = 5})
    else
        if tpWalkConnection then tpWalkConnection:Disconnect() end
        Fluent:Notify({Title = "TP Walk", Content = "Disabled", Duration = 5})
    end
end)

---------------------------
-- ADVANCED TAB
---------------------------
local CFMovementToggle = Tabs.Advanced:AddToggle("CFMovementToggle", {
    Title = "CFrame Movement",
    Default = false,
    Description = "Enable custom CFrame-based movement relative to the camera (disables AutoRotate)."
})
local CFMovementSpeedSlider = Tabs.Advanced:AddSlider("CFMovementSpeedSlider", {
    Title = "CFrame Movement Speed",
    Description = "Set movement speed for CFrame movement.",
    Default = defaultCFMovementSpeed,
    Min = 5,
    Max = 100,
    Rounding = 0
})

local cfMovementConnection, cfInputBeganConnection, cfInputEndedConnection
local cfMoveInput = {W = false, A = false, S = false, D = false}

CFMovementToggle:OnChanged(function()
    local enabled = Options.CFMovementToggle.Value
    if enabled then
        Humanoid.AutoRotate = false
        cfInputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                local key = input.KeyCode.Name
                if cfMoveInput[key] ~= nil then cfMoveInput[key] = true end
            end
        end)
        cfInputEndedConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                local key = input.KeyCode.Name
                if cfMoveInput[key] ~= nil then cfMoveInput[key] = false end
            end
        end)
        cfMovementConnection = RunService.RenderStepped:Connect(function(deltaTime)
            local inputVector = Vector3.new(0,0,0)
            if cfMoveInput.W then inputVector = inputVector + Vector3.new(0,0,-1) end
            if cfMoveInput.S then inputVector = inputVector + Vector3.new(0,0,1) end
            if cfMoveInput.A then inputVector = inputVector + Vector3.new(-1,0,0) end
            if cfMoveInput.D then inputVector = inputVector + Vector3.new(1,0,0) end
            if inputVector.Magnitude > 0 then
                inputVector = inputVector.Unit
                local camCF = workspace.CurrentCamera.CFrame
                local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z)
                if forward.Magnitude > 0 then forward = forward.Unit end
                local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z)
                if right.Magnitude > 0 then right = right.Unit end
                local moveDirection = forward * (-inputVector.Z) + right * inputVector.X
                if moveDirection.Magnitude > 0 then moveDirection = moveDirection.Unit end
                local displacement = moveDirection * CFMovementSpeedSlider.Value * deltaTime
                local newPosition = Root.Position + displacement
                Root.CFrame = CFrame.new(newPosition, newPosition + moveDirection)
            end
        end)
        Fluent:Notify({Title = "CFrame Movement", Content = "Enabled", Duration = 5})
    else
        if cfInputBeganConnection then cfInputBeganConnection:Disconnect() end
        if cfInputEndedConnection then cfInputEndedConnection:Disconnect() end
        if cfMovementConnection then cfMovementConnection:Disconnect() end
        Humanoid.AutoRotate = true
        Fluent:Notify({Title = "CFrame Movement", Content = "Disabled", Duration = 5})
    end
end)
-- hello skids
---------------------------
-- SETTINGS & CONFIGURATION
---------------------------
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("FluentScriptHub")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)

SaveManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
SaveManager:SetFolder("FluentScriptHub/specific-game")
SaveManager:BuildConfigSection(Tabs.Configuration)

Window:SelectTab(1)
Fluent:Notify({Title = "Fluent", Content = "SimpleSpeedX Has been loaded, Enjoy!.", Duration = 5})
SaveManager:LoadAutoloadConfig()
